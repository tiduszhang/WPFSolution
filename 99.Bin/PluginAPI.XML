<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PluginAPI</name>
    </assembly>
    <members>
        <member name="T:PluginAPI.AssemblyPluginAttribute">
            <summary>
            插件程序集特性
            @author zhangsx
            @date 2017/04/12 11:18:19
            </summary>
        </member>
        <member name="M:PluginAPI.AssemblyPluginAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:PluginAPI.AssemblyPluginAttribute.ID">
            <summary>
            插件程序集ID
            </summary>
        </member>
        <member name="P:PluginAPI.AssemblyPluginAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:PluginAPI.AssemblyPluginAttribute.Description">
            <summary>
            说明
            </summary>
        </member>
        <member name="P:PluginAPI.AssemblyPluginAttribute.Type">
            <summary>
            程序集类型
            </summary>
        </member>
        <member name="P:PluginAPI.AssemblyPluginAttribute.DefaultPluginID">
            <summary>
            默认入口插件ID
            </summary>
        </member>
        <member name="P:PluginAPI.AssemblyPluginAttribute.Key">
            <summary>
            程序识别关键字
            </summary>
        </member>
        <member name="T:PluginAPI.PluginPath">
            <summary>
            插件常量类
            @author zhangsx
            @date 2017/04/12 11:18:19
            </summary>
        </member>
        <member name="F:PluginAPI.PluginPath.PluginsPath">
            <summary>
            插件存储目录
            </summary>
        </member>
        <member name="T:PluginAPI.PluginAttribute">
            <summary>
            插件类特性-需要默认构造函数
            @author zhangsx
            @date 2017/04/12 11:18:19
            </summary>
        </member>
        <member name="P:PluginAPI.PluginAttribute.ID">
            <summary>
            插件ID
            </summary>
        </member>
        <member name="P:PluginAPI.PluginAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:PluginAPI.PluginAttribute.Description">
            <summary>
            说明
            </summary>
        </member>
        <member name="P:PluginAPI.PluginAttribute.RunMethod">
            <summary>
            运行方法名称-只允许空参方法名称，区分大小写。
            </summary>
        </member>
        <member name="P:PluginAPI.PluginAttribute.StopMethod">
            <summary>
            停止方法名称-只允许空参方法名称区分大小写。
            </summary>
        </member>
        <member name="P:PluginAPI.PluginAttribute.Type">
            <summary>
            插件归类
            </summary>
        </member>
        <member name="P:PluginAPI.PluginAttribute.IsBuiltIn">
            <summary>
            是否为内置插件-内置插件将为必选插件，一般不开放给用户选择
            </summary>
        </member>
        <member name="P:PluginAPI.PluginAttribute.IsSingleInstance">
            <summary>
            是否为单实例
            </summary>
        </member>
        <member name="P:PluginAPI.PluginAttribute.ParentPluginID">
            <summary>
            父插件ID
            </summary>
        </member>
        <member name="T:PluginAPI.PluginHelper">
            <summary>
            插件帮助类
            @author zhangsx
            @date 2017/04/12 11:18:19
            </summary>
        </member>
        <member name="P:PluginAPI.PluginHelper.ListObject">
            <summary>
            对象列表
            </summary>
        </member>
        <member name="P:PluginAPI.PluginHelper.ApplicationAssembly">
            <summary>
            本程序程序集集合
            </summary>
        </member>
        <member name="P:PluginAPI.PluginHelper.PluginAssembly">
            <summary>
            插件程序集集合
            </summary>
        </member>
        <member name="M:PluginAPI.PluginHelper.LoadApplication">
            <summary>
            初始化程序
            </summary>
        </member>
        <member name="M:PluginAPI.PluginHelper.LoadAssembly(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            加载程序集
            </summary>
            <param name="files"></param>
            <param name="Assemblys"></param>
        </member>
        <member name="M:PluginAPI.PluginHelper.LoadPlugin">
            <summary>
            加载插件
            </summary>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集版本
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.CreateInstanceByKey(System.String,System.String)">
            <summary>
            根据关键字创建程序对象
            </summary>
            <param name="key"></param>
            <param name="PluginId"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.CreateInstancesByKey(System.String,System.String)">
            <summary>
            根据关键字创建程序对象
            </summary>
            <param name="key"></param>
            <param name="PluginId"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.CreateInstanceByAssemblyIdAndPluginId(System.String,System.String)">
            <summary>
            根据ID创建对象
            </summary>
            <param name="AssemblyId"></param>
            <param name="PluginId"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.CreateInstanceByAssemblyIdAndPluginId``1(System.String,System.String)">
            <summary>
            根据ID创建对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="AssemblyId"></param>
            <param name="PluginId"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.Run(System.Object,System.Object[])">
            <summary>
            运行默认执行方法
            </summary>
            <param name="value"></param>
            <param name="Parameter"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.Stop(System.Object,System.Object[])">
            <summary>
            运行默认停止方法
            </summary>
            <param name="value"></param>
            <param name="Parameter"></param>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetPluginAttribute(System.Object)">
            <summary>
            获取当前对象的插件特性
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetPluginAttribute(System.Type)">
            <summary>
            获取当前对象的插件特性
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetAssemblyPluginAttribute(System.Reflection.Assembly)">
            <summary>
            获取程序集的插件特性
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetAssemblyPluginAttributes">
            <summary>
            获取所有插件信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetPluginAttributes(System.Reflection.Assembly)">
            <summary>
            获取所有插件内插件类插件信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetPluginAttributes">
            <summary>
            获取所有插件内插件类插件信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.CreateInstancesByPluginType``1(System.String)">
            <summary>
            根据插件类型获取相同类型的所有插件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Type"></param> 
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.CreateInstancesByPluginType``1(System.Reflection.Assembly[],System.String)">
            <summary>
            根据插件类型获取相同类型的所有插件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="models"></param>
            <param name="Type"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.CreateInstanceByAssemblyIdAndPluginId(System.Reflection.Assembly[],System.String,System.String)">
            <summary>
            根据ID创建对象
            </summary>
            <param name="models"></param>
            <param name="AssemblyId"></param>
            <param name="PluginId"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetModelByKey(System.Reflection.Assembly[],System.String)">
            <summary>
            根据插件特性ID获取插件模块
            </summary>
            <param name="models"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetModelsByKey(System.Reflection.Assembly[],System.String)">
            <summary>
            根据插件特性ID获取插件模块
            </summary>
            <param name="models"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetModelByAssemblyId(System.Reflection.Assembly[],System.String)">
            <summary>
            根据插件特性ID获取插件模块
            </summary>
            <param name="models"></param>
            <param name="AssemblyId"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetTypeByPluginId(System.Reflection.Assembly,System.String)">
            <summary>
            在指定的模块中根据插件ID获取插件类
            </summary>
            <param name="model"></param>
            <param name="PluginId"></param>
            <returns></returns>
        </member>
        <member name="M:PluginAPI.PluginHelper.GetTypesByType(System.Reflection.Assembly,System.String)">
            <summary>
            在指定的模块中根据插件类型获取插件类
            </summary>
            <param name="model"></param>
            <param name="Type"></param>
            <returns></returns>
        </member>
        <member name="T:PluginAPI.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:PluginAPI.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:PluginAPI.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
    </members>
</doc>
